---
AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation Blog Activity
Parameters:

  Parameters :
    ClientPrefix:
      Description: " Client AWS Prefix (XYZ) "
      Type: String
      Default: XYZ

  WebServerKeyName:
    Description: The key pair to establish a SSH connection to the web servers.
    Type: AWS::EC2::KeyPair::KeyName


Resources:
  XYZVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.99.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
      - Key: Name
        Value: XYZVPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: {}
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: XYZVPC
      InternetGatewayId:
        Ref: InternetGateway
  XYZ1public:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs: ''
      CidrBlock: 10.99.1.0/24
      VpcId:
        Ref: XYZVPC
      Tags:
      - Key: Name
        Value: XYZ1public
  XYZ2public:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs: ''
      CidrBlock: 10.99.2.0/24
      VpcId:
        Ref: XYZVPC
      Tags:
      - Key: Name
        Value: XYZ2public
  App1private:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs: ''
      CidrBlock: 10.99.11.0/24
      VpcId:
        Ref: XYZVPC
      Tags:
      - Key: Name
        Value: App1private
  App2private:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs: ''
      CidrBlock: 10.99.12.0/24
      VpcId:
        Ref: XYZVPC
      Tags:
      - Key: Name
        Value: App2private
  DB1private:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs: ''
      CidrBlock: 10.99.13.0/24
      VpcId:
        Ref: XYZVPC
      Tags:
      - Key: Name
        Value: DB1private
  DB2private:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs: ''
      CidrBlock: 10.99.14.0/24
      VpcId:
        Ref: XYZVPC
      Tags:
      - Key: Name
        Value: DB2private


  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: XYZVPC
      Tags:
      - Key: Name
        Value: PublicRT
  RouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: XYZ1public
      RouteTableId:
        Ref: PublicRT
  RouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: XYZ2public
      RouteTableId:
        Ref: PublicRT
  RoutePublicNATToInternet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
    DependsOn: VPCGatewayAttachment
  NATElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: VPCGatewayAttachment
  NATGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: NATElasticIP
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NATElasticIP
        - AllocationId
      SubnetId:
        Ref: XYZ1public
  NATGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRT
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway

  PrivateRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: XYZVPC
      Tags:
      - Key: Name
        Value: PrivateRT
  RouteTableAssociationC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: App1private
      RouteTableId:
        Ref: PrivateRT
  RouteTableAssociationD:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: App2private
      RouteTableId:
        Ref: PrivateRT
  XYZNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: XYZVPC
      Tags:
      - Key: Name
        Value: XYZNACL
  SubnetNetworkAclAssociationA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: XYZ1public
      NetworkAclId:
        Ref: XYZNACL
  SubnetNetworkAclAssociationB:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: XYZ2public
      NetworkAclId:
        Ref: XYZNACL
  XYZNACLEntryIngress100:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: XYZNACL
    Properties:
      NetworkAclId:
        Ref: XYZNACL
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '22'
        To: '22'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  XYZNACLEntryIngress110:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: XYZNACL
    Properties:
      NetworkAclId:
        Ref: XYZNACL
      RuleNumber: '110'
      Protocol: '6'
      PortRange:
        From: '80'
        To: '80'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  XYZNACLEntryIngress120:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: XYZNACL
    Properties:
      NetworkAclId:
        Ref: XYZNACL
      RuleNumber: '120'
      Protocol: '6'
      PortRange:
        From: '443'
        To: '443'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  XYZNACLEntryIngress130:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: XYZNACL
    Properties:
      NetworkAclId:
        Ref: XYZNACL
      RuleNumber: '130'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  XYZNACLEntryEgress100:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: XYZNACL
    Properties:
      NetworkAclId:
        Ref: XYZNACL
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '22'
        To: '22'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  XYZNACLEntryEgress110:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: XYZNACL
    Properties:
      NetworkAclId:
        Ref: DMZNACL
      RuleNumber: '110'
      Protocol: '6'
      PortRange:
        From: '80'
        To: '80'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  XYZNACLEntryEgress120:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: XYZNACL
    Properties:
      NetworkAclId:
        Ref: XYZNACL
      RuleNumber: '120'
      Protocol: '6'
      PortRange:
        From: '443'
        To: '443'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  XYZNACLEntryEgress130:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: XYZNACL
    Properties:
      NetworkAclId:
        Ref: XYZNACL
      RuleNumber: '130'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  AppNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: XYZVPC
      Tags:
      - Key: Name
        Value: AppNACL
  SubnetNetworkAclAssociationC:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: App1private
      NetworkAclId:
        Ref: AppNACL
  SubnetNetworkAclAssociationD:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: App2private
      NetworkAclId:
        Ref: AppNACL
  AppNACLEntryIngress100:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: AppNACL
    Properties:
      NetworkAclId:
        Ref: AppNACL
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '22'
        To: '22'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 10.99.0.0/16
  AppNACLEntryIngress110:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: AppNACL
    Properties:
      NetworkAclId:
        Ref: AppNACL
      RuleNumber: '110'
      Protocol: '6'
      PortRange:
        From: '80'
        To: '80'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 10.99.0.0/16
  AppNACLEntryIngress120:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: AppNACL
    Properties:
      NetworkAclId:
        Ref: AppNACL
      RuleNumber: '120'
      Protocol: '6'
      PortRange:
        From: '443'
        To: '443'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 10.99.0.0/16
  AppNACLEntryIngress130:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: AppNACL
    Properties:
      NetworkAclId:
        Ref: AppNACL
      RuleNumber: '130'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  AppNACLEntryEgress110:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: AppNACL
    Properties:
      NetworkAclId:
        Ref: AppNACL
      RuleNumber: '110'
      Protocol: '6'
      PortRange:
        From: '80'
        To: '80'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  AppNACLEntryEgress120:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: AppNACL
    Properties:
      NetworkAclId:
        Ref: AppNACL
      RuleNumber: '120'
      Protocol: '6'
      PortRange:
        From: '443'
        To: '443'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  AppNACLEntryEgress130:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: AppNACL
    Properties:
      NetworkAclId:
        Ref: AppNACL
      RuleNumber: '130'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 10.99.0.0/16
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Ref: XYZ1public
      - Ref: XYZ2public
      Name: load-balancer
      Type: application
      Scheme: internet-facing
      SecurityGroups:
      - Ref: LoadBalancerSecurityGroup
      IpAddressType: ipv4
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: TargetGroup
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: '80'
      Protocol: HTTP
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: '10'
      HealthCheckPath: "/phpinfo.php"
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: '2'
      Name: TG1
      Port: '80'
      Protocol: HTTP
      UnhealthyThresholdCount: '2'
      VpcId:
        Ref: XYZVPC
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: wordpress-bastion
      VpcId:
        Ref: XYZVPC
      Tags:
      - Key: Name
        Value: BastionSG
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: wordpress-elb
      VpcId:
        Ref: XYZVPC
      Tags:
      - Key: Name
        Value: LoadBalancerSG
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      - CidrIp: 0.0.0.0/0
        FromPort: 443
        IpProtocol: tcp
        ToPort: 443
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: wordpress-ec2
      VpcId:
        Ref: XYZVPC
      Tags:
      - Key: Name
        Value: WebServerSG
      SecurityGroupIngress:
      - FromPort: 22
        IpProtocol: tcp
        SourceSecurityGroupId:
          Ref: BastionSecurityGroup
        ToPort: 22
      - FromPort: 80
        IpProtocol: tcp
        SourceSecurityGroupId:
          Ref: LoadBalancerSecurityGroup
        ToPort: 80
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: VPCGatewayAttachment
    Properties:
      ImageId: ami-97785bed ##need image id
      InstanceType: m5.large
      SecurityGroups:
      - Ref: WebServerSecurityGroup
      KeyName:
        Ref: WebServerKeyName
      AssociatePublicIpAddress: 'false'
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#!/bin/bash\n"
            - 'yum update -y

'
            - 'yum install -y httpd24 php70 mysql56-server php70-mysqlnd git

'
            - 'cd /var/www/html

'
            - 'wget https://wordpress.org/latest.tar.gz

'
            - 'tar -xzf latest.tar.gz

'
            - 'cp wp-config-sample.php wp-config.php

'
            - 'groupadd www

'
            - 'usermod -a -G www ec2-user

'
            - 'chown -R root:www /var/www

'
            - 'chmod -R 2775 /var/www

'
            - 'echo ''<?php phpinfo(); ?>'' > /var/www/html/phpinfo.php

'
            - 'service httpd start

'
            - 'chkconfig httpd on

'
            - 'service mysqld start

'
            - 'chkconfig mysqld on

'
      InstanceMonitoring: 'true'
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      TargetGroupARNs:
      - Ref: TargetGroup
      LaunchConfigurationName:
        Ref: LaunchConfiguration
      MinSize: '2'
      MaxSize: '2'
      DesiredCapacity: '2'
      Cooldown: '300'
      HealthCheckGracePeriod: '300'
      HealthCheckType: ELB
      VPCZoneIdentifier:
      - Ref: App1private
      - Ref: App2private
      Tags:
      - PropagateAtLaunch: 'true'
        Value: instance-wordpress
        Key: Name
  BastionInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.medium
      ImageId: ami-97785bed    ##need image id
      KeyName:
        Ref: WebServerKeyName
      NetworkInterfaces:
      - GroupSet:
        - Ref: BastionSecurityGroup
        AssociatePublicIpAddress: 'true'
        DeviceIndex: '0'
        DeleteOnTermination: 'true'
        SubnetId:
          Ref: XYZ1public
      Tags:
      - Value: bastion-host
        Key: Name




Outputs:
  PubSub:
    Value:
      Ref: XYZ1public
    Export:
      Name: Unique-SubnetId
  pubIpAddress1:
    Description: Public ip address of bastion instance
    Value:
      Fn::GetAtt:
      - BastionInstance
      - PublicIp
  privIpAddress1:
    Description: Private ip address of bastion instance
    Value:
      Fn::GetAtt:
      - BastionInstance
      - PrivateIp

WebServerUrl:
  Description: URL of the load balancer for the sample service.
  Value: !Sub http://${LoadBalancer.DNSName}
